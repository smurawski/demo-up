trigger:
  branches:
    include:
    - master

pr:
  branches:
    include:
      - master

stages:
  - stage: build
    jobs:
      - job: windows
        pool:
          vmImage: 'vs2017-win2016'
        steps:
          - powershell: |
              invoke-restmethod -usebasicparsing 'https://static.rust-lang.org/rustup/dist/i686-pc-windows-gnu/rustup-init.exe' -outfile 'rustup-init.exe'
              ./rustup-init.exe -y --default-toolchain stable-x86_64-pc-windows-msvc --no-modify-path
              remove-item rustup-init.exe
              & "$env:PROGRAMFILES/Rust/.cargo/bin/rustup.exe" update stable
            displayName: Install Rust

          - powershell: |
              $m = convertfrom-json($env:PROGRAMFILES/Rust/.cargo/bin/cargo metadata --format-version 1)
              $version = ($m.packages | where-object {$_.name -like 'demo'}).version
              Write-Host "##vso[build.updatebuildnumber]v$version.$env:BUILD_BUILDID"
            displayName: Label Build

          - powershell: |
              & "$env:PROGRAMFILES/Rust/.cargo/bin/rustup.exe" component add rustfmt
              & "$env:PROGRAMFILES/Rust/.cargo/bin/cargo.exe" fmt -- --version
              & "$env:PROGRAMFILES/Rust/.cargo/bin/cargo.exe" fmt -- --check
            displayName: Validate Formatting

          - powershell: |
              & "$env:PROGRAMFILES/Rust/.cargo/bin/rustup.exe" component add clippy
              & "$env:PROGRAMFILES/Rust/.cargo/bin/cargo.exe" clippy -- --version
              & "$env:PROGRAMFILES/Rust/.cargo/bin/cargo.exe" clippy -- --deny warnings
            displayName: Lint

          - powershell: |
              & "$env:PROGRAMFILES/Rust/.cargo/bin/cargo.exe" +stable-x86_64-pc-windows-msvc check
            displayName: Cargo Check
            condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))

          - powershell: |
              & "$env:PROGRAMFILES/Rust/.cargo/bin/cargo.exe" +stable-x86_64-pc-windows-msvc test
            displayName: Run Tests

          - powershell: |
              & "$env:PROGRAMFILES/Rust/.cargo/bin/cargo.exe" +stable-x86_64-pc-windows-msvc build --release
            displayName: Build Release
            condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))

          - task: PublishBuildArtifacts@1
            displayName: "Publish Artifact: Release Build"
            condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
            inputs:
              PathtoPublish: ./target/release/demo.exe
              ArtifactName: drop
              ArtifactType: Container
              TargetPath: "\\\\my\\share\\$(Build.DefinitionName)\\$(Build.BuildNumber)"
              Parallel: false
              ParallelCount: 8

      - job: linux
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - script: |
              export PATH="~/.cargo/bin:$PATH"
              if command -v rustup >/dev/null; then
                rustup install stable-x86_64-unknown-linux-gnu
              else
                  curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable-x86_64-unknown-linux-gnu -y
              fi
              export PATH="~/.cargo/bin:$PATH"
              rustup update stable
            displayName: Install Rust

          - script: |
              export PATH="~/.cargo/bin:$PATH"
              rustup component add rustfmt
              cargo fmt -- --version
              cargo fmt -- --check
            displayName: Validate Formatting

          - script: |
              export PATH="~/.cargo/bin:$PATH"
              rustup component add clippy
              cargo clippy -- --version
              cargo clippy -- --deny warnings
            displayName: Lint

          - script: |
              export PATH="~/.cargo/bin:$PATH"
              cargo check
            displayName: Cargo Check
            condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))

          - script: |
              export PATH="~/.cargo/bin:$PATH"
              cargo test
            displayName: Run Tests

          - script: |
              export PATH="~/.cargo/bin:$PATH"
              cargo build --release
            displayName: Build Release
            condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))

          - script: |
              mv ./target/release/demo ./target/release/demo-linux
            displayName: Rename Executable
            condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))

          - task: PublishBuildArtifacts@1
            displayName: "Publish Artifact: Release Build"
            condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
            inputs:
              PathtoPublish: ./target/release/demo-linux
              ArtifactName: drop
              ArtifactType: Container
              TargetPath: "\\\\my\\share\\$(Build.DefinitionName)\\$(Build.BuildNumber)"
              Parallel: false
              ParallelCount: 8

      - job: mac
        pool:
          vmImage: 'macos-10.13'
        steps:
          - script: |
              export PATH="~/.cargo/bin:$PATH"
              if command -v rustup >/dev/null; then
                rustup install stable-x86_64-apple-darwin
              else
                  curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable-x86_64-apple-darwin -y
              fi
              export PATH="~/.cargo/bin:$PATH"
              rustup update stable
            displayName: Install Rust

          - script: |
              export PATH="~/.cargo/bin:$PATH"
              rustup component add rustfmt
              cargo fmt -- --version
              cargo fmt -- --check
            displayName: Validate Formatting

          - script: |
              export PATH="~/.cargo/bin:$PATH"
              rustup component add clippy
              cargo clippy -- --version
              cargo clippy -- --deny warnings
            displayName: Lint

          - script: |
              export PATH="~/.cargo/bin:$PATH"
              cargo check
            displayName: Cargo Check
            condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))

          - script: |
              export PATH="~/.cargo/bin:$PATH"
              cargo test
            displayName: Run Tests

          - script: |
              export PATH="~/.cargo/bin:$PATH"
              cargo build --release
            displayName: Build Release
            condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))

          - script: |
              mv ./target/release/demo ./target/release/demo-darwin
            displayName: Rename Executable
            condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))

          - task: PublishBuildArtifacts@1
            displayName: "Publish Artifact: Release Build"
            condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
            inputs:
              PathtoPublish: ./target/release/demo-darwin
              ArtifactName: drop
              ArtifactType: Container
              TargetPath: "\\\\my\\share\\$(Build.DefinitionName)\\$(Build.BuildNumber)"
              Parallel: false
              ParallelCount: 8

  - stage: deploy
    condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
    jobs:
      - job: 'GitHub'
        pool:
          vmImage: 'vs2017-win2016'
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: current
              buildVersionToDownload: latest
              artifactName: drop
              downloadPath: '$(System.ArtifactsDirectory)'
          - powershell: |
              cd $(System.ArtifactsDirectory)
              $version = ((./drop/demo.exe --version) -replace 'demo').trim()
              Write-Host "##vso[build.updatebuildnumber]v$version"
          - task: GitHubRelease@0
            inputs:
              gitHubConnection: github_smurawski
              repositoryName: smurawski/demo-up
              action: create
              target: '$(Build.SourceVersion)'
              tagSource: manual
              tag: $(Build.BuildNumber)
              assets: '$(System.ArtifactsDirectory)/drop/*'