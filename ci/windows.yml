parameters:
  name: 'demo'

steps:
  - powershell: |
      $m = convertfrom-json(cargo metadata --format-version 1)
      $version = ($m.packages | where-object {$_.name -like 'demo'}).version
      Write-Host "##vso[build.updatebuildnumber]v$version.$env:BUILD_BUILDID"
    displayName: Label Build

  - powershell: |
      invoke-restmethod -usebasicparsing 'https://static.rust-lang.org/rustup/dist/i686-pc-windows-gnu/rustup-init.exe' -outfile 'rustup-init.exe'
      ./rustup-init.exe -y --default-toolchain stable-x86_64-pc-windows-msvc --no-modify-path
      remove-item rustup-init.exe
    displayName: Install Rust

  - powershell: |
      & "$env:PROGRAMFILES/Rust/.cargo/bin/rustup.exe" component add rustfmt
      & "$env:PROGRAMFILES/Rust/.cargo/bin/cargo.exe" +stable-x86_64-pc-windows-msvc fmt -- --check
    displayName: Validate Formatting

  - powershell: |
      & "$env:PROGRAMFILES/Rust/.cargo/bin/cargo.exe" +stable-x86_64-pc-windows-msvc check
    displayName: Cargo Check

  - powershell: |
      & "$env:PROGRAMFILES/Rust/.cargo/bin/cargo.exe" +stable-x86_64-pc-windows-msvc test
    displayName: Run Tests

  - powershell: |
      & "$env:PROGRAMFILES/Rust/.cargo/bin/cargo.exe" +stable-x86_64-pc-windows-msvc build --release
    displayName: Build Release

  -
    task: PublishBuildArtifacts@1
    displayName: "Publish Artifact: Release Build"
    inputs:
      PathtoPublish: ./target/release/${{ parameters.name }}.exe
      ArtifactName: drop
      ArtifactType: Container
      TargetPath: "\\\\my\\share\\$(Build.DefinitionName)\\$(Build.BuildNumber)"
      Parallel: "false"
      ParallelCount: "8"
